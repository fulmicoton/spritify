// Generated by CoffeeScript 1.4.0
(function() {
  var IMAGE_PTN, build_sprite, chain_map, cpp_spritify, filepath_to_name, fs, is_png_file, path, spritify_directory, transform_sprite_info, write_css;

  cpp_spritify = require("./build/Release/spritify_cpp");

  fs = require("fs");

  build_sprite = cpp_spritify.build_sprite;

  path = require("path");

  IMAGE_PTN = /^([^.].*)\.[pP][nN][gG]$/;

  is_png_file = function(filepath) {
    return IMAGE_PTN.exec(filepath) != null;
  };

  chain_map = function(operation, elements, callback) {
    var aux, res;
    res = [];
    elements = elements.slice(0);
    aux = function() {
      var el;
      if (elements.length === 0) {
        return callback(res);
      } else {
        el = elements.shift();
        return operation(el, function(val) {
          res.push(val);
          return aux();
        });
      }
    };
    return aux();
  };

  write_css = function(output_png, output_css, layout, callback) {
    var ostream;
    ostream = fs.createWriteStream(output_css, {
      flags: 'w',
      encoding: "utf-8"
    });
    return fs.open(output_css, "w", null, function(err, fd) {
      var write_css_class;
      write_css_class = function(sprite, cb) {
        var css_class;
        css_class = "\n." + sprite.name + " {\n    width: " + sprite.box.w + "px;\n    height: " + sprite.box.h + "px;\n    top: -" + sprite.box.y + "px;\n    left: -" + sprite.box.x + "px;\n    background-image: url(" + output_png + ");\n    padding: 0;\n    margin: 0;\n}\n";
        ostream.write(css_class);
        return cb(sprite);
      };
      return chain_map(write_css_class, layout, callback);
    });
  };

  filepath_to_name = function(filepath, prefix) {
    var filename, match;
    prefix = prefix != null ? prefix : "";
    filename = path.basename(filepath);
    match = IMAGE_PTN.exec(filename);
    if (match != null) {
      return prefix + match[1];
    } else {
      return void 0;
    }
  };

  transform_sprite_info = function(sprite_info, prefix) {
    var box, image_path, layout, sprite, sprites;
    layout = sprite_info.layout;
    sprites = [];
    for (image_path in layout) {
      box = layout[image_path];
      sprite = {};
      sprite.box = box;
      sprite.path = image_path;
      sprite.name = filepath_to_name(image_path, prefix);
      sprites.push(sprite);
    }
    return sprite_info.layout = sprites;
  };

  spritify_directory = function(options, callback) {
    var input, input_name, output_css, output_png, prefix, _ref, _ref1, _ref2;
    input = options.input;
    input_name = path.basename(input);
    output_png = (_ref = options.output_png) != null ? _ref : input_name + ".png";
    output_css = (_ref1 = options.output_css) != null ? _ref1 : input_name + ".css";
    prefix = (_ref2 = options.prefix) != null ? _ref2 : "sprite-";
    return fs.readdir(input, function(err, filepaths) {
      var filepath, png_filepaths;
      png_filepaths = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = filepaths.length; _i < _len; _i++) {
          filepath = filepaths[_i];
          if (is_png_file(filepath)) {
            _results.push(path.join(input, filepath));
          }
        }
        return _results;
      })();
      return build_sprite(png_filepaths, output_png, function(sprite_info) {
        var output_css_dirname, rel_png_path;
        transform_sprite_info(sprite_info, prefix);
        output_css_dirname = path.dirname(output_css);
        rel_png_path = path.relative(output_css_dirname, output_png);
        return write_css(rel_png_path, output_css, sprite_info.layout, function() {
          return callback(sprite_info);
        });
      });
    });
  };

  module.exports = {
    __build_sprite: cpp_spritify.build_sprite,
    spritify_directory: spritify_directory
  };

}).call(this);
